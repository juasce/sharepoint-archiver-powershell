# SharePoint Archiver - Phase 1 Authentication Pipeline
# This pipeline tests the authentication components for SharePoint and Azure Storage

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - scripts/
    - azure-pipelines.yml

pr:
  branches:
    include:
    - main
  paths:
    include:
    - scripts/
    - azure-pipelines.yml

parameters:
  - name: sharepointUrl
    displayName: 'SharePoint Site URL'
    type: string
    default: 'https://ascendispharmacom-my.sharepoint.com/my?id=%2Fpersonal%2Fjua%5Fascendispharma%5Fcom%2FDocuments%2FDocuments%2FCerts&startedResponseCatch=true'
  
  - name: storageAccountName
    displayName: 'Azure Storage Account Name'
    type: string
    default: 'stdaardevmedicalaffairs'
  
  - name: containerName
    displayName: 'Azure Storage Container Name'
    type: string
    default: 'medicalinformation'
  
  - name: keyVaultName
    displayName: 'Azure Key Vault Name'
    type: string
    default: 'kv-sp-archiver-dev-01'

variables:
  - name: agentPool
    value: 'selfhosted-win-latest'

pool:
  name: $(agentPool)

stages:
# Phase 1 commented out - Phase 2 includes all authentication testing
# - stage: Phase1_Authentication
#   displayName: 'Phase 1 - Authentication & Connection Test'
#   jobs:
#   - job: AuthenticationTest
#     displayName: 'Test SharePoint and Azure Storage Authentication'
#     steps:
#     
#     # Step 1: Checkout repository
#     - checkout: self
#       displayName: 'Checkout Source Code'
#       clean: true
# 
#     # Step 2: Install required PowerShell modules
#     - task: PowerShell@2
#       displayName: 'Install Required PowerShell Modules'
#       inputs:
#         targetType: 'inline'
#         script: |
#           Write-Host "Installing required PowerShell modules..."
#           
#           # Install modules with error handling
#           $modules = @('Az.Accounts', 'Az.KeyVault', 'Az.Storage', 'PnP.PowerShell')
#           
#           foreach ($module in $modules) {
#               try {
#                   Write-Host "Installing module: $module"
#                   Install-Module $module -Scope CurrentUser -Force -AllowClobber
#                   Write-Host "✓ Successfully installed $module"
#               }
#               catch {
#                   Write-Error "Failed to install ${module}: $($_.Exception.Message)"
#                   exit 1
#               }
#           }
#           
#           Write-Host "All PowerShell modules installed successfully"
#         pwsh: true
#         errorActionPreference: 'stop'
# 
#     # Step 3: Authenticate to Azure (uses managed identity in Azure DevOps)
#     - task: AzurePowerShell@5
#       displayName: 'Authenticate to Azure'
#       inputs:
#         azureSubscription: 'sc-sharepoint-archiver-DATA-DEV-wif' # Replace with your service connection name
#         ScriptType: 'InlineScript'
#         Inline: |
#           Write-Host "Azure authentication successful"
#           Write-Host "Current context:"
#           Get-AzContext | Select-Object Account, Subscription, Tenant | Format-List
#         azurePowerShellVersion: 'LatestVersion'
#         pwsh: true
# 
#     # Step 4: Run Phase 1 Authentication Test
#     - task: AzurePowerShell@5
#       displayName: 'Execute Phase 1 Authentication Test'
#       inputs:
#         azureSubscription: 'sc-sharepoint-archiver-DATA-DEV-wif' # Use same service connection
#         ScriptType: 'FilePath'
#         ScriptPath: 'scripts/Test-Authentication.ps1'
#         ScriptArguments: >
#           -SharePointUrl "${{ parameters.sharepointUrl }}"
#           -StorageAccountName "${{ parameters.storageAccountName }}"
#           -KeyVaultName "${{ parameters.keyVaultName }}"
#         azurePowerShellVersion: 'LatestVersion'
#         pwsh: true
#         errorActionPreference: 'stop'
# 
#     # Step 5: Publish test results (if test output files are generated)
#     - task: PublishTestResults@2
#       displayName: 'Publish Test Results'
#       condition: succeededOrFailed()
#       inputs:
#         testResultsFormat: 'NUnit'
#         testResultsFiles: '**/TestResults.xml'
#         failTaskOnFailedTests: true
#         testRunTitle: 'SharePoint Archiver Phase 1 Tests'
#       continueOnError: true
# 
#     # Step 6: Upload logs as artifacts
#     - task: PublishBuildArtifacts@1
#       displayName: 'Publish Logs as Artifacts'
#       condition: always()
#       inputs:
#         PathtoPublish: '$(Agent.TempDirectory)'
#         ArtifactName: 'SharePoint-Archiver-Logs'
#         publishLocation: 'Container'
#       continueOnError: true

- stage: Phase2_SingleFileTransfer
  displayName: 'Phase 2 - Single File Transfer'
  # dependsOn: Phase1_Authentication  # Commented out since Phase 1 is disabled
  # condition: succeeded()
  jobs:
  - job: SingleFileTransferTest
    displayName: 'Test Single File Transfer with AzCopy'
    steps:
    
    # Step 1: Checkout repository
    - checkout: self
      displayName: 'Checkout Source Code'
      clean: true

    # Step 2: Install required PowerShell modules
    - task: PowerShell@2
      displayName: 'Install Required PowerShell Modules'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Installing required PowerShell modules..."
          
          # Install modules with error handling
          $modules = @('Az.Accounts', 'Az.KeyVault', 'Az.Storage', 'PnP.PowerShell')
          
          foreach ($module in $modules) {
              try {
                  Write-Host "Installing module: $module"
                  Install-Module $module -Scope CurrentUser -Force -AllowClobber
                  Write-Host "✓ Successfully installed $module"
              }
              catch {
                  Write-Error "Failed to install ${module}: $($_.Exception.Message)"
                  exit 1
              }
          }
          
          Write-Host "All PowerShell modules installed successfully"
        pwsh: true
        errorActionPreference: 'stop'

    # Step 3: Authenticate to Azure
    - task: AzurePowerShell@5
      displayName: 'Authenticate to Azure'
      inputs:
        azureSubscription: 'sc-sharepoint-archiver-DATA-DEV-wif'
        ScriptType: 'InlineScript'
        Inline: |
          Write-Host "Azure authentication successful"
          Write-Host "Current context:"
          Get-AzContext | Select-Object Account, Subscription, Tenant | Format-List
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true

    # Step 4: Run PnP Diagnostics Test
    - task: AzurePowerShell@5
      displayName: 'Execute PnP Diagnostics Test'
      inputs:
        azureSubscription: 'sc-sharepoint-archiver-DATA-DEV-wif'
        ScriptType: 'FilePath'
        ScriptPath: 'scripts/Test-PnPDiagnostics.ps1'
        ScriptArguments: >
          -SharePointUrl "https://ascendispharmacom-my.sharepoint.com/personal/jua"
          -KeyVaultName "${{ parameters.keyVaultName }}"
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        errorActionPreference: 'continue'

    # Step 5: Run Phase 2 Single File Transfer Test (if diagnostics pass)
    - task: AzurePowerShell@5
      displayName: 'Execute Phase 2 Single File Transfer Test'
      condition: succeededOrFailed()
      inputs:
        azureSubscription: 'sc-sharepoint-archiver-DATA-DEV-wif'
        ScriptType: 'FilePath'
        ScriptPath: 'scripts/Test-SingleFileTransfer.ps1'
        ScriptArguments: >
          -SharePointUrl "${{ parameters.sharepointUrl }}"
          -StorageAccountName "${{ parameters.storageAccountName }}"
          -ContainerName "${{ parameters.containerName }}"
          -KeyVaultName "${{ parameters.keyVaultName }}"
          -Recursive:$false
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        errorActionPreference: 'stop'

    # Step 5: Publish test results
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'SharePoint Archiver Phase 2 Tests'
      continueOnError: true

    # Step 6: Upload logs as artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Logs as Artifacts'
      condition: always()
      inputs:
        PathtoPublish: '$(Agent.TempDirectory)'
        ArtifactName: 'SharePoint-Archiver-Phase2-Logs'
        publishLocation: 'Container'
      continueOnError: true